with Ada.Text_IO;            use Ada.Text_IO;
with LCA_projet;
with Arbre;    use Arbre;
package body compresssion is

    package LCA_projet_new is
            new LCA_projet ( T_Donnee => T_Arbre);
    use LCA_projet_new;

    function Construire_Tab_Huff (Tab_binaire: in T_Tab; Tab_octet: in T_Tab; Nb_symbole : in Integer ) return  T_Tab is
        Tab_Huff : T_Tab;
        i: Integer := 1;
        cpt: Integer := 1;
    begin
        for j in 1..Nb_symbole loop
            Initialiser(Tab_Huff(j).binaire);
        end loop;

        while cpt /= (Nb_symbole + 1) loop
            Tab_Huff(cpt).char := Character’Val(Tab_octet(cpt));
            if Tab_binaire(i) = ‘0’ then
                Empiler(Tab_Huff(cpt).binaire, ‘0’);
                i := i + 1;

            elsif Tab_binaire(i) = ‘m’ then
                Empiler(Tab_Huff(cpt).binaire, ‘1’);
                i := i + 1;
            elsif Tab_binaire(i) = ‘1’ then
                cpt := cpt +1;
                Tab_binaire(i) := ‘m’;  -- ‘m’ pour garder l’ancien ‘1’ en mémoire
                while Tab_binaire(i-1) /= ‘0’ loop
                    Tab_binaire(i-1) := ‘x’;    -- ‘x’ signifie chiffre supprimé
                    i := i-1;
                end loop;
                Tab_binaire(i-1) := ‘x’;
                i := 1;
            end if;
        end loop;
    return Tab_Huff;

    end Construire_Tab_Huff;

    function Construire_Arbre_Huff(Tab_freq : in T_Tab) return T_Arbre is
        Sda : T_LCA;
        Arbre : T_Arbre;

    begin
        Initialiser(Sda);
        Initialiser(Arbre, -1); -- Enregistrer la feuille correspond à “\$”
        Enregistrer(Sda, 0, Arbre) ;  --Fonction enregistrer du mini projet avec relation d’ordre pour trier automatiquement

        for i in 1..256 loop
            if Tab_Freq(i) /= 0 then
                Initialiser_Arbre(Arbre, Tab_Freq(i));
                Enregistrer(Sda, Tab_Freq(i), Arbre);
            end if;
        end loop;

        while Taille(Sda) /= 1 loop
            Sous_arbre := Fusion(Premier(Sda), Deuxieme(Sda));
            Enregistrer(Sda, Frequence(Premier(Sda))+Frequence(Deuxieme(Sda)), Sous_arbre);
            Supprimer_Premier(Sda); --Supprime le 1er élément d’une SDA
            Supprimer_Premier(Sda);
        end loop;

    end Construire_Arbre_Huff;

    function Stocker_Texte(MonFichier : File_type) return T_Tab is
        Open(MonFichier, In_File, "enregisrement.txt");
        Get(MonFichier, C);
    end Stocker_Texte;
end compression;
