with Ada.Text_IO;            use Ada.Text_IO;
with LCA_projet;
with Arbre;    use Arbre;
with Piles;
with Tableau;  use Tableau;
with Ada.Integer_Text_IO;    use Ada.Integer_Text_IO;


package body decompression is

    procedure Afficher_Pile is new Pile_Caractere.Afficher(Put);

    package LCA_projet_new is
            new LCA_projet ( T_Donnee => T_Arbre);
    use LCA_projet_new;

    procedure Reconstruire_Liste_octet(Tab_octet : in out T_Tab) is
        indice: Integer;
    begin
        indice := Tab_octet.Elements(1);
        for i in 1..indice-1 loop
            Tab_octet.Elements(i) := Tab_octet.Elements(i+1);
        end loop;
        Tab_octet.Elements(indice) := -1;
    end Reconstruire_Liste_octet;




    procedure Reconstruire_Arbre_Huff(Tab_Huff : in T_Tab_Huff; Arbre : in out T_Arbre; compteur: in out Integer) is
        pointeur_gauche: T_Arbre;
        pointeur_droit: T_Arbre;
        arret_gauche : boolean := False;       -- variabla d'arret si la feuille est créee
        arret_droit : boolean := False;        -- variabla d'arret si la feuille est créee
        existence_gauche: boolean := False;    -- variable d'existence de sous-arbre gauche
        existence_droit: boolean := False;     -- variable d'existence de sous-arbre droit
        Tab_Huff_copie_gauche: T_Tab_Huff;
        Tab_Huff_copie_droit: T_Tab_Huff;

    begin
        Afficher(Arbre, -1, "test");
        Tab_Huff_copie_gauche := Tab_Huff;
        Tab_Huff_copie_droit := Tab_Huff;
        Put_Line("sous_arbre gauche");
        New_Line;


        Put_Line("debut depile");
        Afficher_Tab_Huff(Tab_Huff_copie_gauche);
        New_Line;

        for i in 1..Tab_Huff_copie_gauche.Nb_Elements loop
            if not Pile_Caractere.Est_Vide(Tab_Huff_copie_gauche.Elements(i).binaire) then
                if Pile_Caractere.Sommet(Tab_Huff_copie_gauche.Elements(i).binaire) = '0'  then
                    Pile_Caractere.Depiler(Tab_Huff_copie_gauche.Elements(i).binaire);
                    existence_gauche := True;
                end if;
            end if;
        end loop;


        Put_Line("fin depile");
        Afficher_Tab_Huff(Tab_Huff_copie_gauche);
        New_Line;

        if existence_gauche and not arret_gauche then
            Put_Line("Sous arbre gauche cree");
            Enregistrer_Gauche(Arbre, 0);
        end if;

        if Pile_Caractere.Est_Vide(Tab_Huff_copie_gauche.Elements(compteur).binaire) then
            if Tab_Huff_copie_gauche.Elements(compteur).char = -1 then
                Enregistrer_Gauche(Arbre, -1);
                arret_gauche := True;
                compteur := compteur + 1;
                Put("Element ajoute:");
                Afficher(Arbre, -1, "test");
                New_Line;

            else
                Enregistrer_Gauche(Arbre, Tab_Huff_copie_gauche.Elements(compteur).char);
                arret_gauche := True;
                compteur := compteur + 1;
                Put("Element ajoute:");
                Afficher(Arbre, -1, "test");
                New_Line;

            end if;
        end if;

        if not arret_gauche then
            Put_Line("debut recursion");
            New_Line;
            pointeur_gauche := Arbre_Gauche(Arbre);
            Reconstruire_Arbre_Huff(Tab_Huff_copie_gauche, pointeur_gauche,compteur);
        end if;

        Put_Line("non reiteration gauche");


        Put_Line("sous_arbre droit");

        New_Line;




        Put_Line("debut depile");
        Afficher_Tab_Huff(Tab_Huff_copie_droit);
        New_Line;

        for i in 1..Tab_Huff_copie_droit.Nb_Elements loop
            if not Pile_Caractere.Est_Vide(Tab_Huff_copie_droit.Elements(i).binaire) then
                if Pile_Caractere.Sommet(Tab_Huff_copie_droit.Elements(i).binaire) = '1'  then
                    Pile_Caractere.Depiler(Tab_Huff_copie_droit.Elements(i).binaire);
                    existence_droit := True;
                end if;
            end if;
        end loop;

        Put_Line("fin depile");
        Afficher_Tab_Huff(Tab_Huff_copie_droit);
        New_Line;

        if existence_droit then
            Put_Line("Sous arbre droit cree");
            Enregistrer_Droit(Arbre, 0);
        end if;

        if Pile_Caractere.Est_Vide(Tab_Huff_copie_droit.Elements(compteur).binaire)  then
            if Tab_Huff_copie_droit.Elements(compteur).char = -1 then
                Enregistrer_Droit(Arbre, -1);
                arret_droit := True;
                compteur := compteur + 1;
                Put("Element ajoute:");
                Afficher(Arbre, -1, "test");
                New_Line;

            else
                Enregistrer_Droit(Arbre, Tab_Huff_copie_droit.Elements(compteur).char);
                arret_droit := True;
                compteur := compteur + 1;
                Put("Element ajoute:");
                Afficher(Arbre, -1, "test");
                New_Line;

            end if;
        end if;


        if not arret_droit and not arret_droit then

            Put_Line("debut recursion");
            New_Line;
            pointeur_droit := Arbre_Droit(Arbre);
            Reconstruire_Arbre_Huff(Tab_Huff_copie_droit, pointeur_droit,compteur);
        end if;

        Put_Line("non reiteration droit");



    end Reconstruire_Arbre_Huff;




end decompression;
