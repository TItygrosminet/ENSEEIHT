with Ada.Text_IO;            use Ada.Text_IO;
with LCA_projet;
with Arbre;    use Arbre;

package body compression is

    package LCA_projet_new is
            new LCA_projet ( T_Donnee => T_Arbre);
    use LCA_projet_new;


    function Tab_Huff (Tab_binaire: in T_Tab_character; Tab_octet: in T_Tab; Nb_symbole : in Integer ) return  T_Tab_Huff is
        Tab_Huff: T_Tab_Huff;
        i: Integer := 1;
        cpt: Integer := 1;
        Tab_binaire_new: T_Tab_character;
    begin
        Tab_binaire_new := Tab_binaire;
        for j in 1..Nb_symbole loop
            Initialiser(Tab_Huff(j).binaire);
        end loop;

        while cpt /= (Nb_symbole + 1) loop
            Tab_Huff(cpt).char := Character'Val(Tab_octet(cpt));
            if Tab_binaire_new(i) = '0' then
                Empiler(Tab_Huff(cpt).binaire, '0');
                i := i + 1;

            elsif Tab_binaire_new(i) = 'm' then
                Empiler(Tab_Huff(cpt).binaire, '1');
                i := i + 1;
            elsif Tab_binaire_new(i) = '1' then
                cpt := cpt +1;
                Tab_binaire_new(i) := 'm';  -- 'm' pour garder l’ancien '1' en mémoire
                while Tab_binaire_new(i-1) /= '0' loop
                    Tab_binaire_new(i-1) := 'x';    -- 'x' signifie chiffre supprimé
                    i := i-1;
                end loop;
                Tab_binaire_new(i-1) := 'x';
                i := 1;
            end if;
        end loop;
        return Tab_Huff;

    end Tab_Huff;

    function Arbre_Huff(Tab_freq : in T_Tab) return T_Arbre is
        Sda : T_LCA;
        Arbre : T_Arbre;
        Sous_Arbre : T_Arbre;
    begin
        Initialiser(Sda);
        Initialiser(Arbre, 1); -- Enregistrer la feuille correspond à “\$”
        Enregistrer(Sda, 0, Arbre) ;  --Fonction enregistrer du mini projet avec relation d’ordre pour trier automatiquement

        for i in 1..256 loop
            if Tab_Freq(i) /= 0 then
                Initialiser(Arbre, Tab_Freq(i));
                Enregistrer(Sda, Tab_Freq(i), Arbre);
            end if;
        end loop;

        while Taille(Sda) /= 1 loop
            Sous_arbre := Fusion(Premier(Sda), Deuxieme(Sda));
            Enregistrer(Sda, Frequence(Premier(Sda))+Frequence(Deuxieme(Sda)), Sous_arbre);
            Supprimer_Premier(Sda); --Supprime le 1er élément d’une SDA
            Supprimer_Premier(Sda);
        end loop;
        return Arbre;
    end Arbre_Huff;

    function Liste_symb_octet(Arbre: in T_Arbre; Tab_freq : in T_Tab; Nb_symbole: in Integer) return T_Tab is
        courant: T_Arbre;
        cpt: Integer := 1;
        Tab_octet : T_Tab;
        arret: boolean := False;

    begin
        courant := Arbre;
        if arret then
            return Tab_octet;
        else
            if not Est_Vide(Arbre_Gauche(courant)) then
                return Liste_symb_octet(Arbre_Gauche(courant), Tab_freq, Nb_symbole);
            end if;

            if not Est_Vide(Arbre_Droit(courant)) then
                return Liste_symb_octet(Arbre_Droit(courant), Tab_freq, Nb_symbole);
            end if;

            for i in 1..256 loop
                if Frequence(courant) = 0 then
                    Tab_octet(cpt) := -1;
                    cpt := cpt + 1;
                elsif Tab_freq(i) = Frequence(courant) then
                    Tab_octet(cpt) := i;
                    cpt := cpt + 1;
                end if;
            end loop;

            if cpt = (Nb_symbole+1) then
                arret := True;
            end if;
        end if;
    end Liste_symb_octet;

    function Liste_symb_binaire(Arbre: in T_Arbre; Nb_Symbole: in Integer) return T_Tab_character is
        Tab_binaire: T_Tab_character;
        cpt: Integer := 1;
        courant : T_Arbre;
        arret : boolean := False;
        cpt_arret : Integer := 0;
    begin
        courant := Arbre;
        if arret then
            return Tab_binaire;
        else
            if Est_Vide(Arbre_Gauche(courant)) then
                Tab_binaire(cpt) := '0';
                cpt := cpt + 1;
                return Liste_symb_binaire(Arbre_Gauche(Arbre), Nb_Symbole);
            end if;

            if Est_Vide(Arbre_Droit(Arbre)) then
                Tab_binaire(cpt) := '1';
                cpt := cpt + 1;
                return Liste_symb_binaire(Arbre_Droit(Arbre), Nb_Symbole);
            end if;

            cpt_arret := cpt_arret + 1;
            if cpt = Nb_symbole then
                arret := True;
            end if;
        end if;
    end Liste_symb_binaire;


end compression;
